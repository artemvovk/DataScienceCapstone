'008605113S')")
require(rJava)
library(RJDBC)
drv <- JDBC("oracle.jdbc.OracleDriver",classPath="~/Downloads/instantclient_12_1/ojdbc7.jar", " ")
con <- dbConnect(drv, "jdbc:oracle:thin:@vacols.dev.vaco.va.gov:1526:BVAP", "DSUSER", "Monday615$")
dbGetQuery(con, "select BRIEFF.BFKEY,
BRIEFF.BFCORLID,
BRIEFF.BFCORKEY,
BRIEFF.BFDC,
BRIEFF.BFMPRO,
FOLDER.TIVBMS,
BRIEFF.BFSO,
CORRES.STAFKEY,
CORRES.SNAMEF,
CORRES.SNAMEL,
CORRES.SSN,
BRIEFF.BFDDEC,
FOLDER.TIOCTIME,
BRIEFF.BFREGOFF,
BRIEFF.BFCURLOC,
case when VACOLS.ISSUE_CNT_ALLOWED(BRIEFF.BFKEY) > 0 then
case when VACOLS.ISSUE_CNT_REMAND(BRIEFF.BFKEY) > 0 then
'PARTIALGRANT'
else
'FULLGRANT'
end
else
case when VACOLS.ISSUE_CNT_REMAND(BRIEFF.BFKEY) > 0 then
'REMAND'
else
'DENIAL'
end
end DISPOSITION,
ASSIGN.TSKRQACT
from BRIEFF
join CORRES on BRIEFF.BFCORKEY = CORRES.STAFKEY
join FOLDER on BRIEFF.BFKEY = FOLDER.TICKNUM
join ASSIGN on BRIEFF.BFKEY = ASSIGN.TSKTKNM
/*where BRIEFF.BFCURLOC = '97';")
require(rJava)
library(RJDBC)
drv <- JDBC("oracle.jdbc.OracleDriver",classPath="~/Downloads/instantclient_12_1/ojdbc7.jar", " ")
con <- dbConnect(drv, "jdbc:oracle:thin:@vacols.dev.vaco.va.gov:1526:BVAP", "DSUSER", "Monday615$")
dbGetQuery(con, "select BRIEFF.BFKEY,
BRIEFF.BFCORLID,
BRIEFF.BFCORKEY,
BRIEFF.BFDC,
BRIEFF.BFMPRO,
FOLDER.TIVBMS,
BRIEFF.BFSO,
CORRES.STAFKEY,
CORRES.SNAMEF,
CORRES.SNAMEL,
CORRES.SSN,
BRIEFF.BFDDEC,
FOLDER.TIOCTIME,
BRIEFF.BFREGOFF,
BRIEFF.BFCURLOC,
case when VACOLS.ISSUE_CNT_ALLOWED(BRIEFF.BFKEY) > 0 then
case when VACOLS.ISSUE_CNT_REMAND(BRIEFF.BFKEY) > 0 then
'PARTIALGRANT'
else
'FULLGRANT'
end
else
case when VACOLS.ISSUE_CNT_REMAND(BRIEFF.BFKEY) > 0 then
'REMAND'
else
'DENIAL'
end
end DISPOSITION,
ASSIGN.TSKRQACT
from BRIEFF
join CORRES on BRIEFF.BFCORKEY = CORRES.STAFKEY
join FOLDER on BRIEFF.BFKEY = FOLDER.TICKNUM
join ASSIGN on BRIEFF.BFKEY = ASSIGN.TSKTKNM
/*where BRIEFF.BFCURLOC = '97';")
install.packages("ROracle")
vacolsConnect <- function(dev = FALSE, password = NULL) {
require("ROracle")
username <- "DSUSER"
password <- if(!is.null(password)) password
else if(dev) Sys.getenv("vacols_dev_password") else Sys.getenv("vacols_db_password")
sid      <- "BVAP"
host     <- if(dev) "vacols.dev.vaco.va.gov" else "vacols.vaco.va.gov"
port     <- 1526
connect.string <- paste0(
"(DESCRIPTION=",
"(ADDRESS=(PROTOCOL=tcp)(HOST=", host, ")(PORT=", port, "))",
"(CONNECT_DATA=(SID=", sid, ")))"
)
drv <- dbDriver("Oracle")
con <- dbConnect(drv, username, password, dbname = connect.string)
return(con)
}
vacolsConnect()
vacolsConnect(dev = TRUE, password = "Monday615$")
library(ROracle)
install.packages("ROracle")
install.packages("ROracle")
require(rJava)
library(RJDBC)
drv <- JDBC("oracle.jdbc.OracleDriver",classPath="~/Downloads/instantclient_12_1/ojdbc7.jar", " ")
con <- dbConnect(drv, "jdbc:oracle:thin:@vacols.dev.vaco.va.gov:1526:BVAP", "DSUSER", "Monday615$")
vets <- dbGetQuery(con, "select unique BRIEFF.BFKEY, BRIEFF.BFCORLID, BRIEFF.BFCORKEY, BRIEFF.BFDC, BRIEFF.BFMPRO,
FOLDER.TIVBMS, BRIEFF.BFSO, CORRES.STAFKEY, CORRES.SNAMEF, CORRES.SNAMEL, CORRES.SSN,
BRIEFF.BFDDEC, FOLDER.TIOCTIME, BRIEFF.BFREGOFF, BRIEFF.BFCURLOC,
case when VACOLS.ISSUE_CNT_ALLOWED(BRIEFF.BFKEY) > 0 then
case when VACOLS.ISSUE_CNT_REMAND(BRIEFF.BFKEY) > 0 then
'PARTIALGRANT'
else
'FULLGRANT'
end
else
case when VACOLS.ISSUE_CNT_REMAND(BRIEFF.BFKEY) > 0 then
'REMAND'
else
'DENIAL'
end
end DISPOSITION
from BRIEFF
join CORRES on BRIEFF.BFCORKEY = CORRES.STAFKEY
join FOLDER on BRIEFF.BFKEY = FOLDER.TICKNUM
where BRIEFF.BFCURLOC in ('99') and rownum <= 10000")
vets
str(vets)
vets$DISPOSITION
library(dplyr)
filter(vets, DISPSITION == "FULLGRANT")
filter(vets, DISPOSITION == "FULLGRANT")
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
library(pgmm)
install.packages("pgmm")
library(rpart)
library(pgmm)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.7, list = FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
modFit <- train(Case ~ ., method="rpart", data=training)
?train
modFit
str(segmentationOriginal)
names(segmentationOriginal)
?segmentationData
?segmentationOriginal
modFit <- train(Class ~ ., method="rpart", data=training)
modFit$finalModel
library(rattle)
install.packages("rattle")
library(rattle)
quartz()
library(rattle)
fancyRpartPlot(modFit$finalModel)
library(rpart)
fancyRpartPlot(modFit$finalModel)
install.packages("rattle")
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rpart.plot")
fancyRpartPlot(modFit$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
str(olive)
summary(olive)
head(olive)
inTrain <- createDataPartition(y=olive$Area, p=0.7, list = FALSE)
training <- olive[inTrain,]
testing <- olive[-inTrain,]
modFit <- train(Area ~ ., method = "rpart", data=olive)
predict(modFit, newdata = newdata)
fancyRpartPlot(modFit$finalModel)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
head(SAheart)
str(SAheart)
modFit <- train(chd ~., method = "glm", data = trainSA)
modelSA <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, predict(modelSA, newdata = testSA))
missClass(trainSA$chd, predict(modelSA, newdata = trainSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
head(vowel.test)
head(vowel.train)
vowel.train$y
as.factor(vowel.train$y)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
library(randomForest)
install.packages("randomForest")
library(randomForest)
forestVowel <- randomForest(y ~ ., data = vowel.train)
fancyRpartPlot(forestVowel)
fancyRpartPlot(forestVowel$forest)
order(varImp(forestVowel), decreasing = T)
quit()
install.packages("PKI")
install.packages("rJava")
install.packages("pki")
install.packages("PKI")
rsconnect::setAccountInfo(name='artemvovk',
token='0FCAA11DB8A696C3BA8884469818ACBE',
secret='jbyYAgD69Hwi4MH3w2ttqslf8gT8KGqF4wuOVWS4')
library(rsconnect)
install.packages('rsconnect')
install.packages('rsconnect')
install.packages('PKI')
install.packages('PKI')
library(raster)
getMethod(raster)
?getMethod
?showMethods
?getClass
install.packages("DDPQuiz3")
download.file("https://d396qusza40orc.cloudfront.net/devdataprod/DDPQuiz3_1.0.zip")
download.file("https://d396qusza40orc.cloudfront.net/devdataprod/DDPQuiz3_1.0.zip", "DDPQuiz3.zip")
install.packages("DDPQuiz3.zip")
file.choose("DDPQuiz3.zip")
install.packages(file.choose())
install.packages(file.choose(), repos = NULL)
source("DDPQuiz3/R/createmean.R")
install.packages("Roxygen2")
install.packages("roxygen2")
createmean <- function(x) {
answer <- mean(x)
return(answer)
}
createmean(x)
source('~/Dropbox/Coding/Coursera/DDPQuiz3/R/createmean.R')
R CMD build createmean
install.packages("DDPQuiz3", repos = NULL)
?DDPQuiz3
??DDPQuiz3
?createmean
library(createmean)
library(DDPQuiz3)
?createmean
install.packages("plotly")
shiny::runApp('~/Dropbox/Public/ArtemTDEEapp/CaloriesCount')
library(shiny)
library(ggplot2)
?sliderInput
?shiny
?textInput
runApp('~/Dropbox/Public/ArtemTDEEapp/CaloriesCount')
textOutput()
?textOutput
runApp('~/Dropbox/Public/ArtemTDEEapp/CaloriesCount')
runApp('~/Dropbox/Public/ArtemTDEEapp/CaloriesCount')
runApp('~/Dropbox/Public/ArtemTDEEapp/CaloriesCount')
units <- c(1,1)
units[1]
class(units[1])
class(units[2])
units[2]
units <- c(0.45,2.254)
units[2]
runApp('~/Dropbox/Public/ArtemTDEEapp/CaloriesCount')
?ifelse
runApp('~/Dropbox/Public/ArtemTDEEapp/CaloriesCount')
runApp('~/Dropbox/Public/ArtemTDEEapp/CaloriesCount')
print(c(0.45, 2.54)
)
runApp('~/Dropbox/Public/ArtemTDEEapp/CaloriesCount')
runApp('~/Dropbox/Public/ArtemTDEEapp/CaloriesCount')
runApp('~/Dropbox/Public/ArtemTDEEapp/CaloriesCount')
runApp('~/Dropbox/Public/ArtemTDEEapp/CaloriesCount')
observeEvent()
?observeEvent
runApp('~/Dropbox/Public/ArtemTDEEapp/CaloriesCount')
?submitButton
runApp('~/Dropbox/Public/ArtemTDEEapp/CaloriesCount')
?updateSliderInput
runApp('~/Dropbox/Public/ArtemTDEEapp/CaloriesCount')
?renderTable
runApp('~/Dropbox/Public/ArtemTDEEapp/CaloriesCount')
?renderDataTable
runApp('~/Dropbox/Public/ArtemTDEEapp/CaloriesCount')
install.packages("slidify")
?seq
install.packages("opennlp")
install.packages("openNLP")
install.packages("NLP")
library(NLP)
library(openNLP)
con <- file("~/Downloads/SwiftKeyData/en_US/en_US.twitter.txt", "r")
con
readLines(con, 1)
readLines(con, 2)
s <- as.String(readLines(con, 1))
stokeann <- Maxent_Sent_Token_Annotator()
wordkeann <- Maxent_Word_Token_Annotator()
a2 <- annotate(s, list(stokeann, wordkeann))
aw
a2
s
postagann <- Maxent_POS_Tag_Annotator()
a3 <- annotate(s, postagann, a2)
a3
a3w <- subset(a3, type = "word")
a3w <- subset(a3, type == "word")
a3w
tags <- sapply(a3w$features, '[[', "POS")
tags
table(tags)
sprintf("%s/%s", s[a3w]. tags)
sprintf("%s/%s", s[a3w], tags)
s <- as.String(readLines(con, 2))
s
a2 <- annotate(s, list(stokeann, wordkeann))
a2
a3 <- annotate(s, postagann, a2)
a3
a3w <- subset(a3, type == "word")
a3w
tags <- sapply(a3w$features, '[[', "POS")
tags
table(tags)
sprintf("%s/%s", s[a3w], tags)
s
install.packages("magritter")
install.packages("magrittr")
?magrittr
??magrittr
library(magrittr)
s <- as.String(readLines(con, 100))
s
a2 <- annotate(s, list(stokeann, wordkeann))
a2
a3 <- annotate(s, postagann, a2)
a3
a3w <- subset(a3, type == "word")
a3w
tags <- sapply(a3w$features, '[[', "POS")
tags
table(tags)
text <- as.String(readLines(con, 1000))
text
word_ann <- Maxent_Word_Token_Annotator()
sent_ann <- Maxent_Sent_Token_Annotator()
pos_ann <- Maxent_POS_Tag_Annotator()
posanns <- annotate(text, list(sent_ann, word_ann, pos_ann))
posanns
textanns <- annotate(text, list(sent_ann, word_ann))
str(textanns)
head(textanns)
text_doc <- AnnotatedPlainTextDocument(text, textanns)
text_doc
words(text_doc)
words(text_doc) %>% head(10)
persann <- Maxent_Entity_Annotator(kind = "person")
install.packages(openNLPmodels.en)
install.packages("openNLPmodels.en")
install.packages("openNLPmodels")
??openNLPmodels
??openNLPmodels.en
persann <- Maxent_Entity_Annotator(kind = "person")
install.packages("openNLPmodels.en", repos = "http://datacube.wu.ac.at/", type = "source")
persann <- Maxent_Entity_Annotator(kind = "person")
locann <- Maxent_Entity_Annotator(kind = "location")
organn <- Maxent_Entity_Annotator(kind = "organization")
dateann <- Maxent_Entity_Annotator(kind = "date")
pipeline <- list(sent_ann, word_ann, persann, locann, organn, dateann)
text_annots <- annotate(text, pipeline)
text_doc <- AnnotatedPlainTextDocument(text, text_annots)
entities <- function(doc, kind){}
text_doc
text_doc[words]
?AnnotatedPlainTextDocument
paras(text_doc)
text_doc["locations"]
text_doc["location"]
entities <- function(doc, kind) {
s <- doc$content
a <- annotations(doc)[[1]]
if(hasArg(kind)) {
k <- sapply(a$features, `[[`, "kind")
s[a[k == kind]]
} else {
s[a[a$type == "entity"]]
}
}
entities(text_doc, "location")
entities(text_doc, "date")
entities(text_doc, "organization")
plot(entities(text_doc, "organization"))
plot(entities(text_doc, "organization"), ylim = 1000)
library(ggplot2)
qplot(entities(text_doc, "organization"))
qplot(entities(text_doc, "location"))
dev.new()
qplot(entities(text_doc, "location"))
qplot(entities(text_doc, "date"))
entities(text_doc, "organization")
head(entities(text_doc, "organization"))
table(entities(text_doc, "organization"))
entities(text_doc, "organization")["YES"]
entities(text_doc, "organization")["UK"]
entities(text_doc, "organization")#UK
entities(text_doc, "organization")$UK
entities(text_doc, "organization")[100]
entities(text_doc, "organization")[2]
getwd()
setwd("Capstone/")
getwd()
dir()
con <- file("~/Downloads/SwiftKeyData/en_US/en_US.blogs.txt", "r")
readLines(con, 1)
readLines(con, 20)
blogs_con <- file("~/Downloads/SwiftKeyData/en_US/en_US.blogs.txt", "r")
readLines(blogs_con, 20)
news_con <- file("~/Downloads/SwiftKeyData/en_US/en_US.news.txt", "r")
twit_con <- file("~/Downloads/SwiftKeyData/en_US/en_US.twitter.txt")
source("pipeline.R")
load_file_con("twitter", "en_US")
twit <- load_file_con("twitter", "en_US")
twit
load_file_con("twitter", "en_US")
source("pipeline.R")
load_file_con("twitter", "en_US")
twit <- load_file_con("twitter", "en_US")
twit
readLines(twit, 1)
readLines(twit, 2)
dir("~/Downloads/SwiftKeyData/")
source("pipeline.R")
load_file_con()
source("pipeline.R")
load_file_con()
source("pipeline.R")
load_file_con()
source("pipeline.R")
load_file_con()
load_file_con()
source("pipeline.R")
load_file_con()
load_file_con("blogs", "fi_FI")
fi_blog <- load_file_con("blogs", "fi_FI")
readLines(fi_blog, 20)
fi_blog <- load_file_con("blogs", "fi_FI")
readLines(fi_blog, 20)
file.size("~/Downloads/SwiftKeyData/en_US/en_US.blogs.txt")
?file.size
file.size("~/Downloads/SwiftKeyData/en_US/en_US.blogs.txt") / 2*10
file.size("~/Downloads/SwiftKeyData/en_US/en_US.blogs.txt") / 2**10
file.size("~/Downloads/SwiftKeyData/en_US/en_US.blogs.txt") / 2**20
source("pipeline.R")
load_file_con("twitter", "en_US")
en_twit <- load_file_con("twitter", "en_US")
?connections
en_twit <- load_file_con("twitter", "en_US")
length(readLines(en_twit))
readLines(en_twit, 1)
en_twit <- load_file_con("twitter", "en_US")
readLines(en_twit, 1)
length(readLines(en_twit, 1))
length(as.character(readLines(en_twit, 1)))
nchar(readLines(en_twit, 1))
en_twit <- load_file_con("twitter", "en_US")
source("pipeline.R")
source("pipeline.R")
source("pipeline.R")
source("pipeline.R")
source("pipeline.R")
en_twit <- load_file_con("twitter", "en_US")
get_longest_line(en_twit)
en_news <- load_file_con("news", "en_US")
get_longest_line(en_news)
en_blogs <- load_file_con("blogs", "en_US")
get_longest_line(en_blogs)
source("pipeline.R")
lovecount <- get_lines_with_word(en_twit, "love")
lovecount
en_twit <- load_file_con("twitter", "en_US")
lovecount <- get_lines_with_word(en_twit, "love")
lovecount
source("pipeline.R")
en_twit <- load_file_con("twitter", "en_US")
lovecount <- get_lines_with_word(en_twit, "love")
en_twit <- load_file_con("twitter", "en_US")
hatecount <- get_lines_with_word(en_twit, "hate")
lovecount/hatecount
en_twit <- load_file_con("twitter", "en_US")
?grepl
grepl("biostat", readLines(en_twit))
en_twit <- load_file_con("twitter", "en_US")
readLines(en_twit)[grepl("biostat", readLines(en_twit))]
source("pipeline.R")
en_twit <- load_file_con("twitter", "en_US")
find_line_with_word(en_twit, "biostat")
find_line_with_word(en_twit, "A computer once beat me at chess, but it was no match for me at kickboxing")
en_twit <- load_file_con("twitter", "en_US")
find_line_with_word(en_twit, "A computer once beat me at chess, but it was no match for me at kickboxing")
